apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: process-claims
  #generateName: training-pipeline-
  annotations:
    tekton.dev/output_artifacts: '{"run-a-file": [{"key": "artifacts/$PIPELINERUN/run-a-file/mlpipeline-metrics.tgz",
      "name": "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file/mlpipeline-ui-metadata.tgz", "name": "mlpipeline-ui-metadata",
      "path": "/tmp/mlpipeline-ui-metadata.json"}], "run-a-file-2": [{"key": "artifacts/$PIPELINERUN/run-a-file-2/mlpipeline-metrics.tgz",
      "name": "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-2/mlpipeline-ui-metadata.tgz", "name": "mlpipeline-ui-metadata",
      "path": "/tmp/mlpipeline-ui-metadata.json"}], "run-a-file-3": [{"key": "artifacts/$PIPELINERUN/run-a-file-3/mlpipeline-metrics.tgz",
      "name": "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-3/mlpipeline-ui-metadata.tgz", "name": "mlpipeline-ui-metadata",
      "path": "/tmp/mlpipeline-ui-metadata.json"}], "run-a-file-4": [{"key": "artifacts/$PIPELINERUN/run-a-file-4/mlpipeline-metrics.tgz",
      "name": "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-4/mlpipeline-ui-metadata.tgz", "name": "mlpipeline-ui-metadata",
      "path": "/tmp/mlpipeline-ui-metadata.json"}], "run-a-file-5": [{"key": "artifacts/$PIPELINERUN/run-a-file-5/mlpipeline-metrics.tgz",
      "name": "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-5/mlpipeline-ui-metadata.tgz", "name": "mlpipeline-ui-metadata",
      "path": "/tmp/mlpipeline-ui-metadata.json"}], "run-a-file-6": [{"key": "artifacts/$PIPELINERUN/run-a-file-6/mlpipeline-metrics.tgz",
      "name": "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-6/mlpipeline-ui-metadata.tgz", "name": "mlpipeline-ui-metadata",
      "path": "/tmp/mlpipeline-ui-metadata.json"}]}'
    tekton.dev/input_artifacts: '{}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"run-a-file": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"],
      ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]], "run-a-file-2":
      [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"], ["mlpipeline-ui-metadata",
      "/tmp/mlpipeline-ui-metadata.json"]], "run-a-file-3": [["mlpipeline-metrics",
      "/tmp/mlpipeline-metrics.json"], ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]],
      "run-a-file-4": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"], ["mlpipeline-ui-metadata",
      "/tmp/mlpipeline-ui-metadata.json"]], "run-a-file-5": [["mlpipeline-metrics",
      "/tmp/mlpipeline-metrics.json"], ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]],
      "run-a-file-6": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"], ["mlpipeline-ui-metadata",
      "/tmp/mlpipeline-ui-metadata.json"]]}'
    sidecar.istio.io/inject: "false"
    tekton.dev/template: ''
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"default": "0", "name": "claim_id",
      "optional": true, "type": "Integer"}, {"default": "https://your-endpoint", "name":
      "detection_endpoint", "optional": true, "type": "String"}], "name": "process_claims"}'
  labels:
    pipelines.kubeflow.org/pipelinename: ''
    pipelines.kubeflow.org/generation: ''
spec:
  params:
  - name: claim_id
    value: '0'
  - name: detection_endpoint
    value: https://your-endpoint
  pipelineSpec:
    params:
    - name: claim_id
      default: '0'
    - name: detection_endpoint
      default: https://your-endpoint
    tasks:
    - name: initialize
      taskSpec:
        steps:
        - name: main
          args:
          - |
            cd /shared-data
            rm -r *
            git clone https://github.com/rh-aiservices-bu/insurance-claim-processing
            cd insurance-claim-processing
            ls
          command:
          - sh
          - -c
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: aws-connection-shared-minio---pipelines
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: aws-connection-shared-minio---pipelines
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          image: quay.io/rh-aiservices-bu/rhoai-lab-insurance-claim-processing-pipeline:1.1
          volumeMounts:
          - mountPath: /shared-data
            name: processing-pipeline-storage
            readOnly: false
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        - name: processing-pipeline-storage
          persistentVolumeClaim:
            claimName: processing-pipeline-storage
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: process_claims
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: initialize
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: insurance-claim-processing/lab-materials/05/05-05/initialize.py
            elyra/pipeline-source: process_claims.pipeline
            pipelines.kubeflow.org/task_display_name: initialize
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=3889d6b450d7892186c111f69a758dd2d7928e45f350a7fb00f8229314150432"}'
    - name: get-claims
      params:
      - name: claim_id
        value: $(params.claim_id)
      taskSpec:
        steps:
        - name: main
          args:
          - |
            claim_id="$0"
            export claim_id=$claim_id
            cd /shared-data
            cd insurance-claim-processing/lab-materials/05/05-05
            python get_claims.py
            ls
          - $(inputs.params.claim_id)
          command:
          - sh
          - -c
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: aws-connection-shared-minio---pipelines
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: aws-connection-shared-minio---pipelines
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POSTGRES_HOST
            value: claimdb.$(NAMESPACE).svc.cluster.local
          image: quay.io/rh-aiservices-bu/rhoai-lab-insurance-claim-processing-pipeline:1.1
          volumeMounts:
          - mountPath: /shared-data
            name: processing-pipeline-storage
            readOnly: false
        params:
        - name: claim_id
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        - name: processing-pipeline-storage
          persistentVolumeClaim:
            claimName: processing-pipeline-storage
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: process_claims
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: get_claims
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: insurance-claim-processing/lab-materials/05/05-05/get_claims.py
            elyra/pipeline-source: process_claims.pipeline
            pipelines.kubeflow.org/task_display_name: get_claims
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=3889d6b450d7892186c111f69a758dd2d7928e45f350a7fb00f8229314150432"}'
      runAfter:
      - initialize
    - name: get-accident-time
      taskSpec:
        steps:
        - name: main
          args:
          - |
            cd /shared-data
            cd insurance-claim-processing/lab-materials/05/05-05
            python get_accident_time.py
          command:
          - sh
          - -c
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: aws-connection-shared-minio---pipelines
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: aws-connection-shared-minio---pipelines
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POSTGRES_HOST
            value: claimdb.$(NAMESPACE).svc.cluster.local
          image: quay.io/rh-aiservices-bu/rhoai-lab-insurance-claim-processing-pipeline:1.1
          volumeMounts:
          - mountPath: /shared-data
            name: processing-pipeline-storage
            readOnly: false
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        - name: processing-pipeline-storage
          persistentVolumeClaim:
            claimName: processing-pipeline-storage
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: process_claims
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: get_accident_time
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: insurance-claim-processing/lab-materials/05/05-05/get_accident_time.py
            elyra/pipeline-source: process_claims.pipeline
            pipelines.kubeflow.org/task_display_name: get_accident_time
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=da07fb04c1e95b2900f6c50973b0dac8bba94da0e31e927025c89506a70411e7"}'
      runAfter:
      - get-claims
    - name: get-location
      taskSpec:
        steps:
        - name: main
          args:
          - |
            cd /shared-data
            cd insurance-claim-processing/lab-materials/05/05-05
            python get_location.py
          command:
          - sh
          - -c
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: aws-connection-shared-minio---pipelines
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: aws-connection-shared-minio---pipelines
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POSTGRES_HOST
            value: claimdb.$(NAMESPACE).svc.cluster.local
          image: quay.io/rh-aiservices-bu/rhoai-lab-insurance-claim-processing-pipeline:1.1
          volumeMounts:
          - mountPath: /shared-data
            name: processing-pipeline-storage
            readOnly: false
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        - name: processing-pipeline-storage
          persistentVolumeClaim:
            claimName: processing-pipeline-storage
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: process_claims
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: get_location
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: insurance-claim-processing/lab-materials/05/05-05/get_location.py
            elyra/pipeline-source: process_claims.pipeline
            pipelines.kubeflow.org/task_display_name: get_location
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=0c1606205c836ad73d75f89b44bff3163cbbe9b7c3171334eb5688a5f13f6a4a"}'
      runAfter:
      - get-claims
    - name: get-sentiment
      taskSpec:
        steps:
        - name: main
          args:
          - |
            cd /shared-data
            cd insurance-claim-processing/lab-materials/05/05-05
            python get_sentiment.py
          command:
          - sh
          - -c
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: aws-connection-shared-minio---pipelines
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: aws-connection-shared-minio---pipelines
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POSTGRES_HOST
            value: claimdb.$(NAMESPACE).svc.cluster.local
          image: quay.io/rh-aiservices-bu/rhoai-lab-insurance-claim-processing-pipeline:1.1
          volumeMounts:
          - mountPath: /shared-data
            name: processing-pipeline-storage
            readOnly: false
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        - name: processing-pipeline-storage
          persistentVolumeClaim:
            claimName: processing-pipeline-storage
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: process_claims
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: get_sentiment
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: insurance-claim-processing/lab-materials/05/05-05/get_sentiment.py
            elyra/pipeline-source: process_claims.pipeline
            pipelines.kubeflow.org/task_display_name: get_sentiment
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=a0516303ea38bb88d586b2c791cb59e60f547cbc6aed3bd000d925a7821b2bfa"}'
      runAfter:
      - get-claims
    - name: detect-objects
      params:
      - name: detection_endpoint
        value: $(params.detection_endpoint)
      taskSpec:
        steps:
        - name: main
          args:
          - |
            detection_endpoint="$0"
            export detection_endpoint=$detection_endpoint
            cd /shared-data
            cd insurance-claim-processing/lab-materials/05/05-05
            python detect_objects.py
          - $(inputs.params.detection_endpoint)
          command:
          - sh
          - -c
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: aws-connection-shared-minio---pipelines
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: aws-connection-shared-minio---pipelines
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POSTGRES_HOST
            value: claimdb.$(NAMESPACE).svc.cluster.local
          - name: IMAGES_BUCKET
            value: $(NAMESPACE)
          image: quay.io/rh-aiservices-bu/rhoai-lab-insurance-claim-processing-pipeline:1.1
          volumeMounts:
          - mountPath: /shared-data
            name: processing-pipeline-storage
            readOnly: false
        params:
        - name: detection_endpoint
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        - name: processing-pipeline-storage
          persistentVolumeClaim:
            claimName: processing-pipeline-storage
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: process_claims
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: detect_objects
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: insurance-claim-processing/lab-materials/05/05-05/detect_objects.py
            elyra/pipeline-source: process_claims.pipeline
            pipelines.kubeflow.org/task_display_name: detect_objects
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=97bb4511ba9be4acba71bc51de5bde38d838b73e69cbb1cb8e2a6b28952537fd"}'
      runAfter:
      - get-claims
    - name: summarize-text
      taskSpec:
        steps:
        - name: main
          args:
          - |
            cd /shared-data
            cd insurance-claim-processing/lab-materials/05/05-05
            python summarize_text.py
          command:
          - sh
          - -c
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: aws-connection-shared-minio---pipelines
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: aws-connection-shared-minio---pipelines
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POSTGRES_HOST
            value: claimdb.$(NAMESPACE).svc.cluster.local
          image: quay.io/rh-aiservices-bu/rhoai-lab-insurance-claim-processing-pipeline:1.1
          volumeMounts:
          - mountPath: /shared-data
            name: processing-pipeline-storage
            readOnly: false
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        - name: processing-pipeline-storage
          persistentVolumeClaim:
            claimName: processing-pipeline-storage
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: process_claims
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: summarize_text
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: insurance-claim-processing/lab-materials/05/05-05/summarize_text.py
            elyra/pipeline-source: process_claims.pipeline
            pipelines.kubeflow.org/task_display_name: summarize_text
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=8ace3a6f7e6e8f14b8102c388a305026254f0dd18c0630eada6a0ba347dda20e"}'
      runAfter:
      - get-claims
